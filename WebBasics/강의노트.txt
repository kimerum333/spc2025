# HTML
HyperText Markup Language
<태그> </태그> 의 형태로 작성된다.

# HTML은 개발언어인가?
아니다. 마크업 랭귀지에 해당.
개발언어와 달리 일부 틀려도 최대한 표시할 수 있는 만큼 표시해주려는 경향이 있다.

# 네트워킹
HTTPS 는 사실 http secure가 아니라, http ssl 이다.

HTTPS를 구성하는 PKI 를 이해할 것.
Private / Public 키 방식.
SSL


# 통신 책추천
후니의 쉽게 쓴 시스코 네트워킹

# CSS

## css 색 표현법 공부해둬라.
RGB #FF0000

## 박스 모델
나의 컨텐츠를 감싸는 내 눈에 보이지 않는 요소들
=>순서대로 밖을 감싼다.
콘텐츠 / 패딩 / 보더 / 마진

## 이미지의 floating 속성
글자를 감쌀거냐, 위로갈거냐, 아래로갈거냐, 밀어낼거냐

## 시멘틱 태그
div 가 아니라 시맨틱 태그로 감싸는 것이 좋다.
기능적인 의미는 없지만, 의미를 갖고 있는 태그들.
section header main
=>웹 접근성 / 크롤링


## 블락요소/인라인 요소

## 스크립트언어의 일반원칙

순차적으로 위에서 아래로 하나하나 읽으면서 처리.
아래에 넣은걸로 덮어쓰게 된다.

# CSS 학습사이트

https://flukeout.github.io/
https://flexboxfroggy.com/#ko
https://cssgridgarden.com/#ko

#
https://lovehyun.notion.site/HTML-CSS-1ca6ebae57e1801ea844f1182756701f

#
https://github.com/lovehyun/spc2025

#타이포그라피

폰트는 크게 세리프 / 샌즈세리프로 나뉜다.
꼬리가 붙는게 세리프 꼬리가 없는게 샌 새리프

#웹폰트
폰트는 기본적으로 컴퓨터에 내장된 폰트를 사용.
만약 없으면 차순위 폰트들로 출력된다.
웹폰트는 cdn 으로 다운받아서 어디서나 안정적으로 출력할 수 있는 폰트의 개념.
단점은 당연히 따로 다운받아야하니 느리다는 것.

#오픈소스 라이센스

MIT : 거의 마음대로
Apache : 좀 더 제약이 있음
GPL : 갖다쓰면 소스코드 강제 공개
추가로 더 ...

#Integrity
무결성은 영어로 인테그리티라고 한다.
해쉬값 검사해서 위변조 확인하기 위해 존재하는 속성의 이름으로도 쓰인다.
체크섬.

#ECMA SCRIPT
에크마스크립트라고 읽는다.
자바스크립트 표준 버전
ES6 모던 자바스크립트는 ECMA 6(2015년)


#JS
##Global Object 
사전정의된 전역객체들.
console 개발자도구창
document DOM
navigator 브라우저 / navigator.userAgent : 브라우저 사양. 이것은 실제로 서버로 보내진다.
location 주소창 / location.href : 주소창 location.reload() 새로고침 / screen.width / history.back()

print() => 브라우저 내부의 프린트 기능을 활용. 이처럼 브라우저 내의 거의 모든 요소를 조작가능

## var / let
var는 전역스코프 변수. if 블록 내에서 선언된 var변수를 해당 블록 밖에서도 참조가능.(어이없음)
let 은 블록스코프 변수.

## defer
자바스크립트를 헤더에 넣을 경우, 아직 바디의 DOM 로드가 되기 전에 스크립트가 실행되는 경우가 있다.
defer 를 넣어주면, 돔이 전부 로드된 뒤 실행되므로 오류를 방지할 수 있다.
동일한 문제를 DOMContentLoaded 였나 하는 이벤트에 이벤트리스너 달아줘서 해결할 수도 있다.

#Radix 기수
일반적으로 IT업계에선 진법(10진법, 16진법 등)을 나타내는 방법으로 자주 쓰인다.

#동기/ 비동기
동기 : 대기한다. 기다렸다가 다음거한다. 명확함, 반응성 떨어짐
비동기 : 반응성 좋음. 어떻게 돌아가는지 이해하기 힘듬. 버그가능성 높음.

#기본서추천 Node.js 교과서(조현영 저)


#Event 란?
PC에 있어서 Event 란 비동기적으로 발생하는 행위의 통칭.
전통적으로 이벤트를 처리하는 방법은 인터럽트.
인터럽트 이벤트가 발생시, 핸들러를 통해서...

사용자가 언제 어떤 입력을 할지 모르니, 계속 기다릴 순 없다.
평소에 벌어지지 않는 새로운 사건이 발생할 시 대응한다.

#하위호환성 유지
업그레이드가 되었을 시 예전 버전에서 돌아가던 것들이 그대로 돌아가게 할것이냐?

자바같은 어플리케이션은 내가 패키징하는것. 개발자가 업데이트 안하면 신버전 적용 안돼.
브라우저는 언제나 최신 유지. 하위호환성을 유지하지 않으면 작동하지 않는 웹페이지가 너무 많아질것

#DOM
##셀렉터
getElementBy 시리즈와 QuerySelector 시리즈가 있다.

###겟엘리먼트
ID로 가져오는 경우는 1개, 그 외의 경우는 복수의 엘리먼트를 리턴하는 것을 기억하라.

###쿼리셀렉터
이건 무조건 맨 앞의 하나만 가져온다 / 쿼리셀렉터 올은 복수를 가져온다.
CSS셀렉터 문법을 써서 가져올 수 있다.

# HTML Collection
##querySelectorAll
반환 타입: NodeList
정적(static) 컬렉션 (스냅샷)
DOM 변경사항이 자동으로 반영되지 않음
배열 메서드를 사용하려면 변환 필요 (예: Array.from() 또는 전개 연산자 [...])
forEach 메서드 내장


## getElementsByTagName / getElementsByClassName
반환 타입: HTMLCollection
라이브(live) 컬렉션
DOM이 변경되면 자동으로 업데이트됨
인덱스와 .length로 접근 가능
forEach 메서드 없음 (배열 메서드 직접 사용 불가)
이 차이는 DOM 요소를 조작할 때 주의해야 할 중요한 부분입니다. 특히 반복문 안에서 요소를 추가하거나 제거할 때, 라이브 컬렉션은 예상치 못한 동작을 일으킬 수 있습니다.

# 스프레드연산자
let items = HTML콜렉션타입의 무언가...
[...items] = 이렇게 하면 콜렉션이 풀린다. 패킹된 것들을 적절히 꺼내주는 연산자다.

# 개발 프로세스

1. 기획 (기획자/외부)

2. 설계(요구분석 / 설계 / 검색 / 스캐치)
=>팀 개발 리더
=>문서화

3. 개발 => 코딩
몰라서 찾는경우
필요한 라이브러리 선택
설계도(툴/핸드스캐치) => 아키텍처 다이어그램
API설계 (지라, 컨플루언스)
ERD(툴, 핸드스캐치)

4. 버그 오류잡기

5. 배포 운영

# QA?
회사가 중간 이상이면, 팀이 따로 있다.
작으면 개발자가 다 한다.

수작업 테스트가 굉장히 많다.
제대로 된 QA는 자동화를 한다. => QA는 개발자여야 한다.
But 현실적으로는 국내에서는 개발 잘 못해도 QA로 가는 경우가 많아.

# 테스트 기법
경험기반
유스케이스기반
리스트기반...

페어와이즈 조합기법

경계값 분석
균등분할 테스트

바운더리 테스트

# RCA Root Cause Analysis
문제가 왜 발생했는가? 를 파악하는것.
재발 방지 대책.


# WBS / 간트차트
WBS : 서로 디펜던시가 있는 작업과 없는 작업을 분리.
간트차트 : 

# CPU의 멀티처리
CPU의 처리 단위는 클럭 단위.
1초에 처리하는 클락수 = clock speed  / 2.1 Ghz <=> 5.4Ghz 라면, 21억번,54억번의 클럭수 처리

# 스레드 풀
스레드에 상한이 없으면, DDOS 등에 취약.
스레드수에 최대 제약을 둔다.

# 큐
해야 할 일들을 대기열에 넣어둔다. Queue
이후 누군가 큐를 바라보며 하나하나 처리한다.
하다보면 언젠가 되겠지. 코로나 대기열 등...
브라우저에는 이미 이런게 있는데 왜 백엔드에는 없나?
=>자바스크립트로 이미 브라우저가 있으니 가져오자. 오픈소스 브라우저 크로미움에서 가져온다.
